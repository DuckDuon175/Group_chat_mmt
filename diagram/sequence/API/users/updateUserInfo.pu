@startuml


skinparam style strictuml

skinparam lifelineStrategy solid

skinparam ParticipantPadding 80

skinparam BoxPadding 10

autonumber

actor User as User

box "view" #LightGoldenRodYellow

participant UpdateUserInfoPage as UpdateUserInfoPage

end box

box "route" #lightBlue

participant UserRoute as UserRoute

end box


box "controller" #LightGoldenRodYellow
participant UserController as UserController

end box


box "model" #lightBlue
participant UserModel as UserModel

end box


User -> UpdateUserInfoPage: Request to change password
activate User
activate UpdateUserInfoPage

UpdateUserInfoPage -> UserRoute: PUT api/users/profile
activate UserRoute

note right of UpdateUserInfoPage #Aqua
* Request param:
Content type: application/json
Request content:
  - name: String
  - doB: Date
  - email: String
  - phone_number: String

end note

UserRoute -> UserController: updateUserInfo(req, res)
activate UserController

note right of UserRoute #Aqua
* Request param:
{ name, doB
 phone_number } = req.body
token = req.cookies.jwt
end note



UserController -> UserController: Decode token

UserController -> UserModel: findByPk(decodeToken.user_id)

activate  UserModel

UserModel --> UserController: return user

deactivate UserModel

opt user does not exist
  UserController --> UserRoute: return response error
end

opt req.body.name
  UserController -> UserController: user.name = req.body.name
end

opt req.body.doB
  UserController -> UserController: user.phone_number = req.body.doB
end

opt req.body.phone_number
  UserController -> UserController: user.phone_number = req.body.phone_number
end

UserController -> UserModel: save()
activate UserModel

UserModel --> UserController: return
deactivate UserModel

UserController --> UserRoute: return response

deactivate UserController

UserRoute --> UpdateUserInfoPage: return response

deactivate UserRoute

UpdateUserInfoPage --> User: return response

deactivate UpdateUserInfoPage
deactivate User


@enduml

